# -*- coding: utf-8 -*-
"""modelo_de_múltiplos_estágios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ei1BVBBmbWExyiwOV5MkXSAm6Tb0ollt
"""

import yfinance as yf
import numpy as np
import pandas as pd

# --- 1. MELHORANDO OS INPUTS DINAMICAMENTE ---

ticker = "ITSA4.SA"
mercado_ticker = "^BVSP" # Ibovespa

# Baixando dados para cálculo do Beta
dados = yf.download([ticker, mercado_ticker], period="5y")['Close']
preços = yf.download(ticker, period="1d")['Close']

# Calculando retornos diários
retornos = dados.pct_change().dropna()

# Calculando Covariância e Variância
covariancia = retornos.cov().iloc[0, 1]
variancia_mercado = retornos[mercado_ticker].var()

print(retornos)
print(variancia_mercado, covariancia)

# Calculando o Beta
beta_calculado = covariancia / variancia_mercado
print(f"Beta Calculado (5 anos): {beta_calculado:.2f}")

# Inputs (agora mais dinâmicos e com premissas claras)
rf = 0.11 # Taxa livre de risco (ex: juros longos atuais)
premio_risco = 0.055 # Prêmio de risco de mercado mais conservador
custo_capital_k = rf + beta_calculado * (premio_risco)
print(f"Custo de Capital (k) calculado: {custo_capital_k:.2%}")

# --- 2. ESTRUTURA PARA MODELO DE 2 ESTÁGIOS ---

# Premissas do modelo
roe = 0.16 # ROE da empresa (buscar dinamicamente seria o ideal)
payout = 0.60 # Política de Payout (buscar dinamicamente)
anos_crescimento_alto = 5 # Projetaremos por 5 anos

g_alto = roe * (1 - payout) # Crescimento no Estágio 1
g_perpetuo = 0.03 # Crescimento na perpetuidade (ex: crescimento do PIB)

print(f"Taxa de Crescimento Alta (g1): {g_alto:.2%}")
print(f"Taxa de Crescimento Perpétua (g2): {g_perpetuo:.2%}")

# Pegando o último dividendo pago (D0)
div_data = yf.Ticker(ticker)
ultimo_dividendo_anual = div_data.dividends.resample('YE').sum().iloc[-1]
D0 = ultimo_dividendo_anual

# Estágio 1: Projetar dividendos e trazer a valor presente
dividendos_projetados = []
vps_dividendos = []

for ano in range(1, anos_crescimento_alto + 1):
    dividendo = D0 * (1 + g_alto) ** ano
    dividendos_projetados.append(dividendo)

    # Trazendo a valor presente
    vp_dividendo = dividendo / ((1 + custo_capital_k) ** ano)
    vps_dividendos.append(vp_dividendo)

# Estágio 2: Calcular Valor Terminal e trazer a valor presente
ultimo_dividendo_projetado = dividendos_projetados[-1]
dividendo_perpetuidade_d1 = ultimo_dividendo_projetado * (1 + g_perpetuo)

valor_terminal = dividendo_perpetuidade_d1 / (custo_capital_k - g_perpetuo)

# Trazendo o Valor Terminal a Valor Presente
vp_valor_terminal = valor_terminal / ((1 + custo_capital_k) ** anos_crescimento_alto)

# --- 3. CÁLCULO FINAL ---
valor_justo = sum(vps_dividendos) + vp_valor_terminal

print(f"\\n--- Resultado (Modelo 2 Estágios) ---")
print(f"Soma dos VPs dos Dividendos (Estágio 1): R$ {sum(vps_dividendos):.2f}")
print(f"VP do Valor Terminal (Estágio 2): R$ {vp_valor_terminal:.2f}")
print(f"Valor Justo Estimado por Ação: R$ {valor_justo:.2f}")

# --- 4. COMPARAÇÃO FINAL COM O PREÇO DE MERCADO (VERSÃO ROBUSTA) ---

print("\n" + "="*40)
print("ANÁLISE FINAL DE VALUATION")
print("="*40)

# Imprimir os resultados para comparação
print(f"Preço Justo (Modelo 2 Estágios): R$ {valor_justo:.2f}")
print(f"Preço Atual de Mercado: R$ {preços.values[0].item():.2f}")
print("-"*40)

print("\nAtenção: Este é um resultado educacional baseado nas premissas do modelo.")