# -*- coding: utf-8 -*-
"""modelo_de_gordon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yR_rYGghhHxu1OE0Z2Ix43yHdDltM0Av
"""

import yfinance as yf

# Coletando os dados de preços e dividendos da ITSA4
ticker = "ITSA4.SA"
preços = yf.download(ticker, period="1d")['Close']
dados = yf.Ticker(ticker)
dividendos = dados.dividends

# calcular o Sustainable Growth Rate
sg_rate = dados.info['returnOnEquity'] * (1 - dados.get_info()['payoutRatio'])

sg_rate

"""Calculando a taxa de retorno exigida pelos investidores (r)"""

# Beta da ação: Yahoo Finance
beta = dados.info['beta']
beta

!pip install ipeadatapy
import ipeadatapy as ip #importa dados do IPEADATA

# Taxa refetencial: swaps - DI pré-360 dias - média do período (IPEADATA/B3)
## Taxa livre de risco nominal negociada
juros_livre = (
    ip.timeseries("BMF12_SWAPDI36012") #Captura a série usando o código
    .rename(columns = {'VALUE ((% a.a.))' : 'swaps'})[['swaps']] #renomeia as colunas
    .div(100) #porcentagem
    .iloc[-1] # seleciona o último valor
    .swaps
)

juros_livre

# Retorno do mercado
retorno_mercado = 0.15
retorno_mercado

# Calcula o custo do capital
custo_capital = (juros_livre + beta * (retorno_mercado - juros_livre))
custo_capital

# Calculando a taxa de crescimento dos dividendos (g)
import pandas as pd

anual_dividens = (
    pd.DataFrame(dividendos) # transforma em Df
    .tz_localize(None) # remove o fuso horário
    .assign(Year = lambda x: x.index.year) # cria uma coluna com o ano
    .groupby(['Year']) # agrupa por ano
    .agg({'Dividends' : 'sum'}) # soma os dividendos
    .iloc[:-1] # no ano vigente, a soma não está completa, portanto a retiramos
)

anual_dividens

from matplotlib import pyplot as plt

plt.bar(anual_dividens.index, anual_dividens['Dividends'])
plt.xlabel('Ano')
plt.ylabel('Dividendos')
plt.title('Dividendos da ITSA4')
plt.show()

# Calculando o dividendo esperado (D)
D1 = anual_dividens.mean().Dividends
D1

#Calculando o VPL da ação
VPL = D1 / (custo_capital - sg_rate)

print(f"Valor presente da ação {ticker}: R$ {VPL:.2f}")
print(f"Valor da ação {ticker}: R$ {preços.values[0].item():.2f}")